#! /bin/sh

PROG=$0
SCRIPT_DIR="$(CDPATH= cd -- "$(dirname -- "$0")" && pwd)"

echo "Scripts : $SCRIPT_DIR"

die() {
    echo
    echo "$@"
    exit 1
}

REPOS=
TEMPLATE=

while [ $# -gt 0 ]; do
  key="$1"

  case $key in
    -r|--repositories)
      REPOS="$2"
      shift # past argument
      shift # past value
      ;;
    -t|--template)
      TEMPLATE="$2"
      shift # past argument
      shift # past value
      ;;
    *)    # unknown option
      die "unknown argument $1"
      ;;
  esac
done

[ -z "$REPOS" ] && die "--repositories not specified"
[ -z "$TEMPLATE" ] && die "--template not specified"

[ -f "/zram/$(whoami)/dotnet.ready" ] || die "dotnet not installed"

. "${SCRIPT_DIR}/setup-local-dotnet"

TASKNAME=templateupdate
WORK=${SCRIPT_DIR}/../work/${REPOS}/
[ -d "/zram" ] && WORK=/zram/${TASKNAME}/${REPOS}/
LOGS=~/logs/${REPOS}/
LOG_BASE=${LOGS}/template
LOG_FILE=${LOG_BASE}.log
LAST_LOG_FILE1=${LOG_BASE}.old
LAST_LOG_FILE2=${LOG_BASE}.old.1
LAST_LOG_FILE3=${LOG_BASE}.old.2
LAST_LOG_FILE4=${LOG_BASE}.old.3
RELEASE_LOG_FILE=${LOG_BASE}.release.log

REPOS_LIST=${SCRIPT_DIR}/config/${REPOS}/repos.lst
POWERSHELL=${SCRIPT_DIR}/scripts/powershell/UpdateFromTemplate.ps1
WORKTEMP=/tmp/${TASKNAME}/${REPOS}
[ -d "/zram" ] && WORKTEMP=/zram/.tmp/${TASKNAME}/${REPOS}/
[ ! -d "$WORKTEMP" ] && mkdir -p "$WORKTEMP"
export TMPDIR=$WORKTEMP

echo "Work: ${WORK}"
echo "Temp: ${WORKTEMP}"
echo "Logs: ${LOGS}"
echo "Repos.lst: ${REPOS_LIST}"
echo "Powershell: ${POWERSHELL}"
echo "Template: ${TEMPLATE}"

echo "Path: ${PATH}"

[ ! -d "${LOGS}" ] && mkdir -p ${LOGS}
[ ! -d "${WORK}" ] && mkdir -p ${WORK}

[ ! -f "${POWERSHELL}" ] && die "${POWERSHELL} does not exist"
[ ! -f "${REPOS_LIST}" ] && die "${REPOS_LIST} does not exist"

[ -f "${LOG_FILE}" ] && grep RELEASE "${LOG_FILE}" >> "${RELEASE_LOG_FILE}"
[ -f "${LAST_LOG_FILE4}" && ! -f "${LAST_LOG_FILE3}" ] && rm ${LAST_LOG_FILE4}
[ -f "${LAST_LOG_FILE3}" && ! -f "${LAST_LOG_FILE2}" ] && mv ${LAST_LOG_FILE3} ${LAST_LOG_FILE4}
[ -f "${LAST_LOG_FILE2}" && ! -f "${LAST_LOG_FILE1}" ] && mv ${LAST_LOG_FILE2} ${LAST_LOG_FILE3}
[ -f "${LAST_LOG_FILE1}" && ! -f "${LOG_FILE}" ] && mv ${LAST_LOG_FILE1} ${LAST_LOG_FILE2}
[ -f "${LOG_FILE}" ] && mv ${LOG_FILE} ${LAST_LOG_FILE1}

echo "Changing to ${SCRIPT_DIR}"
cd ${SCRIPT_DIR}

# UPDATE DOTNET SETTINGS
export DOTNET_NOLOGO=true
export DOTNET_PRINT_TELEMETRY_MESSAGE=false
export DOTNET_ReadyToRun=0
export DOTNET_TC_QuickJitForLoops=1
export DOTNET_TieredPGO=1

# OVERRIDE NUGET LOCATIONS
dotnet tool restore --verbosity detailed > "${LOG_FILE}.install" 2>&1
if [ -d "/zram" ] ; then
  [ -d "/zram" ] && WORKTEMP=/zram/.tmp/${TASKNAME}/${REPOS}/

  export NUGET_PACKAGES=/zram/.nuget/${TASKNAME}/${REPOS}/packages
  echo "Updating NUGET_PACKAGES to ${NUGET_PACKAGES}"
  export NUGET_HTTP_CACHE_PATH=/zram/.nuget/${TASKNAME}/${REPOS}/cache
  echo "Updating NUGET_HTTP_CACHE_PATH to ${NUGET_HTTP_CACHE_PATH}"
  export NUGET_PLUGINS_CACHE_PATH=/zram/.nuget/${TASKNAME}/${REPOS}/plugins-cache
  echo "Updating NUGET_PLUGINS_CACHE_PATH to ${NUGET_PLUGINS_CACHE_PATH}"
  dotnet tool restore --verbosity detailed >> "${LOG_FILE}.install" 2>&1
fi

mkdir -p "$WORKTMP"
export TMPDIR=$WORKTMP

dotnet tool list >> "${LOG_FILE}.install" 2>&1

date >> "${RELEASE_LOG_FILE}"
echo "Running: dotnet pwsh -file ${POWERSHELL} -repos ${REPOS_LIST} -work ${WORK} -trackingFolder ${LOGS} -templateRepo ${TEMPLATE}"
echo "Running: dotnet pwsh -file ${POWERSHELL} -repos ${REPOS_LIST} -work ${WORK} -trackingFolder ${LOGS} -templateRepo ${TEMPLATE}" > ${LOG_FILE}
echo "NUGET_PACKAGES to ${NUGET_PACKAGES}" >> ${LOG_FILE}
echo "NUGET_HTTP_CACHE_PATH to ${NUGET_HTTP_CACHE_PATH}" >> ${LOG_FILE}
echo "Updating NUGET_PLUGINS_CACHE_PATH to ${NUGET_PLUGINS_CACHE_PATH}" >> ${LOG_FILE}
dotnet pwsh -file ${POWERSHELL} -repos ${REPOS_LIST} -work ${WORK} -trackingFolder ${LOGS} -templateRepo ${TEMPLATE} > ${LOG_FILE} 2>&1

[ -f "${LOG_FILE}" ] && grep RELEASE "${LOG_FILE}" >> "${RELEASE_LOG_FILE}"
[ -f "${LAST_LOG_FILE4}" && ! -f "${LAST_LOG_FILE3}" ] && rm ${LAST_LOG_FILE4}
[ -f "${LAST_LOG_FILE3}" && ! -f "${LAST_LOG_FILE2}" ] && mv ${LAST_LOG_FILE3} ${LAST_LOG_FILE4}
[ -f "${LAST_LOG_FILE2}" && ! -f "${LAST_LOG_FILE1}" ] && mv ${LAST_LOG_FILE2} ${LAST_LOG_FILE3}
[ -f "${LAST_LOG_FILE1}" && ! -f "${LOG_FILE}" ] && mv ${LAST_LOG_FILE1} ${LAST_LOG_FILE2}
[ -f "${LOG_FILE}" ] && mv ${LOG_FILE} ${LAST_LOG_FILE1}

dotnet build-server shutdown > "${LOG_BASE}.build-server" 2>&1
echo "Done"
