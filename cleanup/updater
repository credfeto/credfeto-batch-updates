#! /bin/bash


die() {
    echo
    echo "$@"
    exit 1
}

BASEDIR="$(dirname "$(readlink -f "$0")")"

USER="$(whoami || die "No user")"
export USER

[ -z "$USER" ] && die "USER not defined"
[ -z "$HOME" ] && die "HOME not defined"
echo "Running as: $USER"
echo "Home: $HOME"

echo "Repos: $REPOS_LIST"
echo "Template: $TEMPLATE"
echo "Packages: $PACKAGES"
echo "Release: $RELEASE"

[ -f "$HOME/.nuget/NuGet/NuGet.Config" ] || die "No NuGet.Config"
[ -z "$PACKAGES" ] && die "PACKAGES not defined"
[ -z "$RELEASE" ] && die "RELEASE not defined"
[ -z "$REPOS_LIST" ] && die "REPOS_LIST not defined"
[ -z "$TEMPLATE" ] && die "TEMPLATE not defined"

# Ensure that TMP environment variables are set up as used by dotnet and tests
export TMP=$(mktemp -d)
export TEMP=$TMP
export TMPDIR=$TMP

# Setting permissions
doas chown -R "$USER:$USER" "$HOME" || die "Could not ensure home dir owner"
chmod 700 "$HOME/.gnupg" || die "Could not ensure .gnupg permissions"
chmod 700 "$HOME/.ssh" || die "Could not ensure .ssh permissions"

# Setup git
[ -z "$GIT_USER_NAME" ] && die "GIT_USER_NAME not defiled"
[ -z "$GIT_USER_EMAIL" ] && die "GIT_USER_EMAIL not defiled"
git config --global user.name "$GIT_USER_NAME"
git config --global user.email "$GIT_USER_EMAIL"
git config --global pull.rebase true
git config --global merge.ff false
git config --global rebase.autosquash true
git config --global core.autocrlf false
git config --global core.ignorecase false
git config --global fetch.prune true
git config --global push.autoSetupRemote true
git config --global core.preloadindex true
git config --global core.fscache true

# Setup gpg signing
"$BASEDIR/setup-gpg" "$HOME/.gnupg/key.asc" || die "GPG setup failed"


# Adding Certificates
doas cp "$HOME/certs/api.nuget.local.pem" /usr/local/share/ca-certificates/ || die "could not import api.nuget.local.pem"
doas cp "$HOME/certs/funfair.nuget.local.pem" /usr/local/share/ca-certificates/ || die "could not import funfair.nuget.local.pem"
doas cp "$HOME/certs/funfair-prerelease.nuget.local.pem" /usr/local/share/ca-certificates/ || die "could not import funfair-prerelease.nuget.local.pem"
doas cp "$HOME/certs/builds.dotnet.local.pem" /usr/local/share/ca-certificates/ || die "could not import builds.dotnet.local.pem"
doas update-ca-certificates || die "could not import certificates"

# Dotnet settings
export DOTNET_ROOT="$HOME/dotnet"
export DOTNET_INSTALL_DIR="$DOTNET_ROOT"
export DOTNET_MULTILEVEL_LOOKUP="false"
export DOTNET_NOLOGO="true"
export DOTNET_PRINT_TELEMETRY_MESSAGE="false"
export DOTNET_JitCollect64BitCounts="1"
export DOTNET_ReadyToRun="1"
export DOTNET_TC_QuickJitForLoops="1"
export DOTNET_TC_CallCountingDelayMs="0"
export DOTNET_TieredPGO="1"
export MSBUILDTERMINALLOGGER="auto"

[ -f "/bin/tar" ] || die "tar not found"

while sleep 120; do

  cd "$HOME" || die "Could not switch to $HOME"

  # Installing .net
  for VERSION in $DOTNET_CHANNELS
  do
    SDK_VERSION_URL="$DOTNET_SOURCE/dotnet/Sdk/$VERSION/latest.version"

    echo "Checking latest sdk version from $SDK_VERSION_URL"
    echo ""
    SDK_VERSION=$(curl --connect-timeout 5 \
                            --max-time 10 \
                            --retry 5 \
                            --retry-delay 1 \
                            --retry-max-time 40 \
                            -s \
                            -L \
                            -f \
                            "$SDK_VERSION_URL" || die "Could not read SDK Version from $SDK_VERSION_URL")

    install_dotnet_version "$VERSION" "$SDK_VERSION"

  done

  "$DOTNET_ROOT/dotnet" --list-sdks

  "$DOTNET_ROOT/dotnet" nuget list source

  cat "$HOME/.nuget/NuGet/NuGet.Config"

  echo "Setting up environments"
  export PATH="$PATH:$DOTNET_ROOT"
  export WORK="$HOME/work"
  export TRACKING_FILE="$HOME/tracking/tracking.json"
  LOGS="$HOME/tracking"
  LOG_BASE=${LOGS}/cleanup
  LOG_FILE=${LOG_BASE}.log
  LAST_LOG_FILE1=${LOG_BASE}.old
  LAST_LOG_FILE2=${LOG_BASE}.old.1
  LAST_LOG_FILE3=${LOG_BASE}.old.2
  LAST_LOG_FILE4=${LOG_BASE}.old.3
  RELEASE_LOG_FILE=${LOG_BASE}.release.log

  echo "Rotating log files"
  [ -f "${LOG_FILE}" ] && grep RELEASE "${LOG_FILE}" >> "${RELEASE_LOG_FILE}"
  [ -f "${LAST_LOG_FILE4}" ] && [ -f "${LAST_LOG_FILE3}" ] && rm "${LAST_LOG_FILE4}"
  [ -f "${LAST_LOG_FILE3}" ] && [ -f "${LAST_LOG_FILE2}" ] && mv "${LAST_LOG_FILE3}" "${LAST_LOG_FILE4}"
  [ -f "${LAST_LOG_FILE2}" ] && [ -f "${LAST_LOG_FILE1}" ] && mv "${LAST_LOG_FILE2}" "${LAST_LOG_FILE3}"
  [ -f "${LAST_LOG_FILE1}" ] && [ -f "${LOG_FILE}" ] && mv "${LAST_LOG_FILE1}" "${LAST_LOG_FILE2}"
  [ -f "${LOG_FILE}" ] && mv "${LOG_FILE}" "${LAST_LOG_FILE1}"

  echo "Installing updater tool"
  {
    echo "Installing tools..."
    date
    [ ! -d ./.config ] && [ ! -f "$HOME/.config/dotnet-tools.json" ] && "$DOTNET_ROOT/dotnet" new tool-manifest
    echo "Installing Credfeto.DotNet.Repo.Tools.Cmd"
    "$DOTNET_ROOT/dotnet" tool install --local Credfeto.DotNet.Repo.Tools.Cmd
    "$DOTNET_ROOT/dotnet" tool update --local Credfeto.DotNet.Repo.Tools.Cmd
    "$DOTNET_ROOT/dotnet" tool list
    date
  } > "${LOG_BASE}.install" 2>&1

  echo "Running tool"
  "$DOTNET_ROOT/dotnet" updaterepo \
          code-cleanup \
            --repositories "${REPOS_LIST}" \
            --work "${WORK}" \
            --tracking "${TRACKING_FILE}" \
            --packages "${PACKAGES}" \
            --template "${TEMPLATE}" \
            --release "${RELEASE}" \
               2>&1 | tee "${LOG_FILE}"

  echo "Done"
done