#! /bin/bash


die() {
    echo
    echo "$@"
    exit 1
}

BASEDIR="$(dirname "$(readlink -f "$0")")"


USER="$(whoami || die "No user")"
export USER

[ -z "$USER" ] && die "USER not defined"
[ -z "$HOME" ] && die "HOME not defined"

echo "Running as: $USER"
echo "Home: $HOME"

echo "Repos: $REPOS_LIST"
echo "Template: $TEMPLATE"
echo "Packages: $PACKAGES"
echo "Release: $RELEASE"

[ -f "$HOME/.nuget/NuGet/NuGet.Config" ] || die "No NuGet.Config"
[ -z "$PACKAGES" ] && die "PACKAGES not defined"
[ -z "$RELEASE" ] && die "RELEASE not defined"
[ -z "$REPOS_LIST" ] && die "REPOS_LIST not defined"
[ -z "$TEMPLATE" ] && die "TEMPLATE not defined"

# Setting permissions
sudo chown -R "$USER:$USER" "$HOME" || die "Could not ensure home dir owner"
chmod 700 "$HOME/.gnupg" || die "Could not ensure .gnupg permissions"
chmod 700 "$HOME/.ssh" || die "Could not ensure .ssh permissions"

# Ensure that TMP environment variables are set up as used by dotnet and tests
export TMP=$(mktemp -d)
export TEMP=$TMP
export TMPDIR=$TMP

# Setup git
"$BASEDIR/setup-git" || die "GIT setup failed"

# Setup gpg signing
"$BASEDIR/setup-gpg" "$HOME/.gnupg/key.asc" || die "GPG setup failed"

# Adding Certificates
"$BASEDIR/setup-certificates" || die "Certificate setup failed"

# Dotnet settings
export DOTNET_ROOT="$HOME/dotnet"
export DOTNET_INSTALL_DIR="$DOTNET_ROOT"
export DOTNET_MULTILEVEL_LOOKUP="false"
export DOTNET_NOLOGO="true"
export DOTNET_PRINT_TELEMETRY_MESSAGE="false"
export DOTNET_JitCollect64BitCounts="1"
export DOTNET_ReadyToRun="1"
export DOTNET_TC_QuickJitForLoops="1"
export DOTNET_TC_CallCountingDelayMs="0"
export DOTNET_TieredPGO="1"
export MSBUILDTERMINALLOGGER="auto"

[ -f "/bin/tar" ] || die "tar not found"

. "$BASEDIR/install-dotnet"

export PATH=$PATH:$DOTNET_ROOT

while sleep 120; do

  cd "$HOME" || die "Could not switch to $HOME"

  # Installing .net
  for VERSION in $DOTNET_CHANNELS
  do

    SDK_VERSION=$(get_latest_dotnet_sdk_version "$VERSION")

    [ -z "$SDK_VERSION" ] && die "Could not determine latest SDK version for $VERSION"

    install_dotnet_version "$VERSION" "$SDK_VERSION"

  done

  "$DOTNET_ROOT/dotnet" --list-sdks

  "$DOTNET_ROOT/dotnet" nuget list source

  cat "$HOME/.nuget/NuGet/NuGet.Config"

  echo "Setting up environments"
  export PATH="$PATH:$DOTNET_ROOT"
  export WORK="$HOME/work"
  export TRACKING_FILE="$HOME/tracking/tracking.json"
  export PACKAGE_CACHE="$HOME/tracking/packages.cache.json"
  LOGS="$HOME/tracking"
  LOG_BASE=${LOGS}/packages
  LOG_FILE=${LOG_BASE}.log
  LAST_LOG_FILE1=${LOG_BASE}.old
  LAST_LOG_FILE2=${LOG_BASE}.old.1
  LAST_LOG_FILE3=${LOG_BASE}.old.2
  LAST_LOG_FILE4=${LOG_BASE}.old.3
  RELEASE_LOG_FILE=${LOG_BASE}.release.log

  echo "Rotating log files"
  [ -f "${LOG_FILE}" ] && grep RELEASE "${LOG_FILE}" >> "${RELEASE_LOG_FILE}"
  [ -f "${LAST_LOG_FILE4}" ] && [ -f "${LAST_LOG_FILE3}" ] && rm "${LAST_LOG_FILE4}"
  [ -f "${LAST_LOG_FILE3}" ] && [ -f "${LAST_LOG_FILE2}" ] && mv "${LAST_LOG_FILE3}" "${LAST_LOG_FILE4}"
  [ -f "${LAST_LOG_FILE2}" ] && [ -f "${LAST_LOG_FILE1}" ] && mv "${LAST_LOG_FILE2}" "${LAST_LOG_FILE3}"
  [ -f "${LAST_LOG_FILE1}" ] && [ -f "${LOG_FILE}" ] && mv "${LAST_LOG_FILE1}" "${LAST_LOG_FILE2}"
  [ -f "${LOG_FILE}" ] && mv "${LOG_FILE}" "${LAST_LOG_FILE1}"

  echo "Installing updater tool"
  {
    echo "Installing Credfeto.DotNet.Repo.Tools.Cmd"
    date
    [ ! -d ./.config ] && [ ! -f "$HOME/.config/dotnet-tools.json" ] && "$DOTNET_ROOT/dotnet" new tool-manifest
    "$DOTNET_ROOT/dotnet" tool install --local Credfeto.DotNet.Repo.Tools.Cmd
    "$DOTNET_ROOT/dotnet" tool update --local Credfeto.DotNet.Repo.Tools.Cmd
    "$DOTNET_ROOT/dotnet" tool list
    date
  }  2>&1 | tee "${LOG_BASE}.install"


  {
    echo "Running tool"
    "$DOTNET_ROOT/dotnet" updaterepo \
          update-packages \
              --repositories "${REPOS_LIST}" \
              --work "${WORK}" \
              --tracking "${TRACKING_FILE}" \
              --packages "${PACKAGES}" \
              --cache "${PACKAGE_CACHE}" \
              --template "${TEMPLATE}" \
              --release "${RELEASE}" \
        || die "Update failed"
  } 2>&1 | tee "${LOG_FILE}"
  echo "Done"

  "$BASEDIR/optimise-git" || die "GIT optimise failed"
done
