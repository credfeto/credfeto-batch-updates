#! /bin/bash

PROG=$0
SCRIPT_DIR="$(CDPATH= cd -- "$(dirname -- "$0")" && pwd)"
echo "Scripts : $SCRIPT_DIR"

die() {
    echo
    echo "$@"
    exit 1
}

REPOS=

while [ $# -gt 0 ]; do
  key="$1"

  case $key in
    -r|--repositories)
      REPOS="$2"
      shift # past argument
      shift # past value
      ;;
    *)    # unknown option
      die "unknown argument $1"
      ;;
  esac
done

[ -z "$REPOS" ] && die "--repositories not specified"

[ -f "/zram/$(whoami)/dotnet.ready" ] || die "dotnet not installed"

. "${SCRIPT_DIR}/setup-local-dotnet"

TASKNAME=packageupdate
WORK=${SCRIPT_DIR}/../work/${REPOS}/
[ -d "/zram" ] && WORK=/zram/${TASKNAME}/${REPOS}/

LOGS=~/logs/${REPOS}/
LOG_BASE=${LOGS}packages
TRACE_LOG=${LOG_BASE}.trace
LOG_FILE=${LOG_BASE}.log
LAST_LOG_FILE1=${LOG_BASE}.old
LAST_LOG_FILE2=${LOG_BASE}.old.1
LAST_LOG_FILE3=${LOG_BASE}.old.2
LAST_LOG_FILE4=${LOG_BASE}.old.3
RELEASE_LOG_FILE=${LOG_BASE}.release.log

PACKAGE_CACHE_BASE=~/logs/${REPOS}/cache
PACKAGE_CACHE=${PACKAGE_CACHE_BASE}.json
LAST_PACKAGE_CACHE=${PACKAGE_CACHE_BASE}.old

WORKTEMP=/tmp/${TASKNAME}/${REPOS}
[ -d "/zram" ] && WORKTEMP=/zram/.tmp/${TASKNAME}/${REPOS}/
[ ! -d "$WORKTEMP" ] && mkdir -p "$WORKTEMP"
export TMPDIR=$WORKTEMP

REPOS_LIST=${SCRIPT_DIR}/config/${REPOS}/repos.lst
POWERSHELL=${SCRIPT_DIR}/scripts/powershell/UpdatePackages.ps1
POWERSHELL_CACHE=${SCRIPT_DIR}/scripts/powershell/UpdatePackagesBuildCache.ps1
PACKAGES=${SCRIPT_DIR}/config/packages.json

date > "${TRACE_LOG}"
echo "Work: ${WORK}" >> "${TRACE_LOG}"
echo "Temp: ${WORKTEMP}" >> "${TRACE_LOG}"
echo "Logs: ${LOGS}" >> "${TRACE_LOG}"
echo "Repos.lst: ${REPOS_LIST}" >> "${TRACE_LOG}"
echo "Powershell: ${POWERSHELL}" >> "${TRACE_LOG}"
echo "Packages.json: ${PACKAGES}" >> "${TRACE_LOG}"

echo "Path: ${PATH}" >> "${TRACE_LOG}"

[ ! -d "${LOGS}" ] && mkdir -p ${LOGS}
[ ! -d "${WORK}" ] && mkdir -p ${WORK}

[ ! -f "${POWERSHELL}" ] && die "${POWERSHELL} does not exist"
[ ! -f "${REPOS_LIST}" ] && die "${REPOS_LIST} does not exist"
[ ! -f "${PACKAGES}" ] && die "${PACKAGES} does not exist"

[ -f "${LOG_FILE}" ] && grep RELEASE "${LOG_FILE}" >> "${RELEASE_LOG_FILE}"
[ -f "${LAST_LOG_FILE3}" ] && rm ${LAST_LOG_FILE3}
[ -f "${LAST_LOG_FILE2}" ] && mv ${LAST_LOG_FILE2} ${LAST_LOG_FILE3}
[ -f "${LAST_LOG_FILE1}" ] && mv ${LAST_LOG_FILE1} ${LAST_LOG_FILE2}
[ -f "${LOG_FILE}" ] && mv ${LOG_FILE} ${LAST_LOG_FILE1}

[ -f "${LAST_PACKAGE_CACHE}" ] && rm ${LAST_PACKAGE_CACHE}
[ -f "${PACKAGE_CACHE}" ] && mv ${PACKAGE_CACHE} ${LAST_PACKAGE_CACHE}

echo "Changing to ${SCRIPT_DIR}" >> "${TRACE_LOG}"
cd "${SCRIPT_DIR}"

echo "UPDATE DOTNET SETTINGS" >> "${TRACE_LOG}"
export DOTNET_NOLOGO=true
export DOTNET_PRINT_TELEMETRY_MESSAGE=false
export DOTNET_ReadyToRun=0
export DOTNET_TC_QuickJitForLoops=1
export DOTNET_TieredPGO=1
echo "PATH: $PATH" >> "${TRACE_LOG}"
echo "DOTNET_ROOT: $DOTNET_ROOT" >> "${TRACE_LOG}"
echo "DOTNET_INSTALL_DIR: $DOTNET_INSTALL_DIR" >> "${TRACE_LOG}"
echo "DotNetCLI_Path: $DotNetCLI_Path" >> "${TRACE_LOG}"

echo "OVERRIDE NUGET LOCATIONS" >> "${TRACE_LOG}"
echo "Using default locations and restoring" >> "${LOG_BASE}.install"
dotnet tool restore --verbosity detailed > "${LOG_BASE}.install" 2>&1
if [ -d "/zram" ] ; then
  export NUGET_PACKAGES=/zram/.nuget/${TASKNAME}/${REPOS}/packages
  echo "Updating NUGET_PACKAGES to ${NUGET_PACKAGES}" >> "${TRACE_LOG}"

  export NUGET_HTTP_CACHE_PATH=/zram/.nuget/${TASKNAME}/${REPOS}/cache
  echo "Updating NUGET_HTTP_CACHE_PATH to ${NUGET_HTTP_CACHE_PATH}" >> "${TRACE_LOG}"

  export NUGET_PLUGINS_CACHE_PATH=/zram/.nuget/${TASKNAME}/${REPOS}/plugins-cache
  echo "Updating NUGET_PLUGINS_CACHE_PATH to ${NUGET_PLUGINS_CACHE_PATH}" >> "${TRACE_LOG}"

  echo "Using overridden locations and restoring" >> "${LOG_BASE}.install"
  dotnet tool restore --verbosity detailed >> "${LOG_BASE}.install" 2>&1
fi

if [ -f "${LAST_PACKAGE_CACHE}" ] ; then
  echo "Installed tools before updating cache" >> "${TRACE_LOG}" 2>&1
  dotnet tool list >> "${TRACE_LOG}" 2>&1
  echo "Attempting to pre-populate cache with all used packages" >> "${TRACE_LOG}"
  echo "dotnet pwsh -file ${POWERSHELL_CACHE} -work ${WORK} -packageCacheToRead ${LAST_PACKAGE_CACHE} -packageCacheToWrite ${PACKAGE_CACHE} -packagesToUpdate ${PACKAGES}" >> "${TRACE_LOG}"
  echo "PWD: $PWD"
  dotnet pwsh -file "${POWERSHELL_CACHE}" -work "${WORK}" -packageCacheToRead "${LAST_PACKAGE_CACHE}" -packageCacheToWrite "${PACKAGE_CACHE}" -packagesToUpdate "${PACKAGES}" > "${LOG_BASE}.cache-update" 2>&1 || die "Cache Update Failed"

  cd "${SCRIPT_DIR}"

  echo "Installed tools after updating cache" >> "${TRACE_LOG}" 2>&1
  dotnet tool list >> "${TRACE_LOG}" 2>&1

else
    echo "Installed tools (no cache update)" >> "${TRACE_LOG}" 2>&1
    dotnet tool list  >> "${TRACE_LOG}" 2>&1
fi

dotnet tool list

date >> "${RELEASE_LOG_FILE}"
echo "Running: dotnet pwsh -file ${POWERSHELL} -repos ${REPOS_LIST} -work ${WORK} -trackingFolder ${LOGS} -packageCache ${PACKAGE_CACHE} -packagesToUpdate ${PACKAGES}" >> "${TRACE_LOG}"
echo "Running: dotnet pwsh -file ${POWERSHELL} -repos ${REPOS_LIST} -work ${WORK} -trackingFolder ${LOGS} -packageCache ${PACKAGE_CACHE} -packagesToUpdate ${PACKAGES}" > "${LOG_FILE}"
echo "NUGET_PACKAGES to ${NUGET_PACKAGES}" >> "${LOG_FILE}"
echo "NUGET_HTTP_CACHE_PATH to ${NUGET_HTTP_CACHE_PATH}" >> "${LOG_FILE}"
echo "Updating NUGET_PLUGINS_CACHE_PATH to ${NUGET_PLUGINS_CACHE_PATH}" >> "${LOG_FILE}"
cd "${SCRIPT_DIR}"
echo "PWD: $PWD"
dotnet pwsh -file "${POWERSHELL}" -repos "${REPOS_LIST}" -work "${WORK}" -trackingFolder "${LOGS}" -packageCache "${PACKAGE_CACHE}" -packagesToUpdate "${PACKAGES}" >> "${LOG_FILE}" 2>&1

[ -f "${LOG_FILE}" ] && grep RELEASE "${LOG_FILE}" >> "${RELEASE_LOG_FILE}"
[ -f "${LAST_LOG_FILE3}" ] && rm ${LAST_LOG_FILE3}
[ -f "${LAST_LOG_FILE2}" ] && mv ${LAST_LOG_FILE2} ${LAST_LOG_FILE3}
[ -f "${LAST_LOG_FILE1}" ] && mv ${LAST_LOG_FILE1} ${LAST_LOG_FILE2}
[ -f "${LOG_FILE}" ] && mv ${LOG_FILE} ${LAST_LOG_FILE1}

echo "Kill Build Server" >> "${TRACE_LOG}"
dotnet build-server shutdown > "${LOG_BASE}.build-server" 2>&1


echo "Done" >> "${TRACE_LOG}"
echo "Done"
